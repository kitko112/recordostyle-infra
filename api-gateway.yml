AWSTemplateFormatVersion: 2010-09-09
Description: API Gateway integration with SNS

Parameters:
  DomainName:
    Description: Domain name of recordostyle
    Type: String

Resources:
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Recordostyle API Endpoint to receive JSON payloads
      Name: recordostyle-api-gateway
      
  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: !Ref SNSTopic
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: recordostyle-api-gateway-policy
      RoleName: recordostyle-api-gateway-role

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: recordostyle-inquiry
      Subscription:
        - Endpoint: kitko112@gmail.com
          Protocol: email

  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Credentials: !GetAtt 'APIGatewayRole.Arn'
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestParameters:
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
        RequestTemplates:
          application/json: !Sub Action=Publish&TopicArn=$util.urlEncode('${SNSTopic}')&Message=$util.urlEncode($input.body)&Subject=$util.urlEncode('Recordostyle Inquiry Received')
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :sns:path//
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: '200'
      ResourceId: !Ref InquiryResource
      RestApiId: !Ref APIGateway

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref InquiryResource
      RestApiId: !Ref APIGateway
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: !Sub "'https://www.${DomainName},https://${DomainName}'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    
  InquiryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: inquiry
      RestApiId: !Ref APIGateway
    
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: PostMethod
    Properties:
      RestApiId: !Ref 'APIGateway'
    
  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Deployment
      RestApiId: !Ref APIGateway
      StageName: prod
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"logSource":"apigateway", "requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "api_id":"$context.apiId", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "path":"$context.path", "resource_path":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength", "responseLatency":"$context.responseLatency", "error_message":"$context.error.message"}'
      
    
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn:
        Fn::ImportValue: recordostyle-cert-arn
      DomainName: !Sub api.${DomainName}
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: "v1"
      DomainName:
        Ref: ApiDomainName
      RestApiId:
        Ref: APIGateway
      Stage:
        Ref: ProdStage

  ApiGatewayRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: 
        Fn::ImportValue: recordostyle-hostedzone-id
      RecordSets:
        - Name: !Sub api.${DomainName}
          Type: A
          AliasTarget:
            DNSName: !GetAtt ApiDomainName.RegionalDomainName
            HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${DomainName}/prod"
      RetentionInDays: 5